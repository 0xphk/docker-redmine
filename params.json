{"name":"Docker Redmine","tagline":"A Dockerfile that installs redmine, apache, mysql and a bunch of redmine plugins and themes","body":"# Table of Contents\r\n- [Introduction](#introduction)\r\n    - [Version](#version)\r\n    - [Changelog](Changelog.md)\r\n- [Installation](#installation)\r\n- [Quick Start](#quick-start)\r\n- [Configuration](#configuration)\r\n    - [Data Store](#data-store)\r\n    - [Database](#database)\r\n        - [MySQL](#mysql)\r\n            - [Internal MySQL Server](#internal-mysql-server)\r\n            - [External MySQL Server](#external-mysql-server)\r\n    - [Mail](#mail)\r\n    - [Putting it all together](#putting-it-all-together)\r\n    - [Available Configuration Parameters](#available-configuration-parameters)\r\n- [Maintenance](#maintenance)\r\n    - [SSH Login](#ssh-login)\r\n- [Upgrading](#upgrading)\r\n- [References](#references)\r\n\r\n# Introduction\r\nDockerfile to build a Redmine container image (with some additional themes and plugins).\r\n\r\n## Version\r\nCurrent Version: 2.5.0\r\n\r\n# Installation\r\n\r\nPull the image from the docker index. This is the recommended method of installation as it is easier to update image in the future. These builds are performed by the Trusted Build service.\r\n\r\n```bash\r\ndocker pull sameersbn/redmine\r\n```\r\n\r\nSince version 2.4.2, the image builds are being tagged. You can now pull a particular version of redmine by specifying the version number. For example,\r\n\r\n```bash\r\ndocker pull sameersbn/redmine:2.5.0\r\n```\r\n\r\nAlternately you can build the image yourself.\r\n\r\n```bash\r\ngit clone https://github.com/sameersbn/docker-redmine.git\r\ncd docker-redmine\r\ndocker build -t=\"$USER/redmine\" .\r\n```\r\n\r\n# Quick Start\r\nRun the redmine image with the name \"redmine\".\r\n\r\n```bash\r\ndocker run -name redmine -d sameersbn/redmine\r\nREDMINE_IP=$(docker inspect redmine | grep IPAddres | awk -F'\"' '{print $4}')\r\n```\r\n\r\nAccess the Redmine application\r\n\r\n```bash\r\nxdg-open \"http://${REDMINE_IP}\"\r\n```\r\n\r\n__NOTE__: Please allow a minute or two for the Redmine application to start.\r\n\r\nLogin using the default username and password:\r\n\r\n* username: admin\r\n* password: admin\r\n\r\nYou should now have Redmine ready for testing. If you want to use Redmine for more than just testing then please read the **Advanced Options** section.\r\n\r\n# Configuration\r\n\r\n## Data Store\r\nFor the file storage we need to mount a volume at the following location.\r\n\r\n* /redmine/files\r\n\r\nVolumes can be mounted in docker by specifying the **'-v'** option in the docker run command.\r\n\r\n```bash\r\nmkdir -pv /opt/redmine/files\r\ndocker run -name redmine -d \\\r\n  -v /opt/redmine/files:/redmine/files sameersbn/redmine\r\n```\r\n\r\n## Database\r\n\r\nRedmine uses a database backend to store its data.\r\n\r\n### Internal MySQL Server\r\nThis docker image is configured to use a MySQL database backend. The database connection can be configured using environment variables. If not specified, the image will start a mysql server internally and use it. However in this case, the data stored in the mysql database will be lost if the container is stopped/deleted. To avoid this you should mount a volume at /var/lib/mysql.\r\n\r\n```bash\r\nmkdir /opt/redmine/mysql\r\ndocker run -name redmine -d \\\r\n  -v /opt/redmine/files:/redmine/files \\\r\n  -v /opt/redmine/mysql:/var/lib/mysql sameersbn/redmine\r\n```\r\n\r\nThis will make sure that the data stored in the database is not lost when the image is stopped and started again.\r\n\r\n#### External MySQL Server\r\nThe image can be configured to use an external MySQL database instead of starting a MySQL server internally. The database configuration should be specified using environment variables while starting the Redmine image.\r\n\r\nBefore you start the Redmine image create user and database for redmine.\r\n\r\n```bash\r\nmysql -uroot -p\r\nCREATE USER 'redmine'@'%.%.%.%' IDENTIFIED BY 'password';\r\nCREATE DATABASE IF NOT EXISTS `redmine_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;\r\nGRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `redmine_production`.* TO 'redmine'@'%.%.%.%';\r\n```\r\n\r\n*Assuming that the mysql server host is 192.168.1.100*\r\n\r\n```bash\r\ndocker run -name redmine -d \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=redmine_production\" \\\r\n  -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -v /opt/redmine/files:/redmine/files sameersbn/redmine\r\n```\r\n\r\nThis will initialize the redmine database and after a couple of minutes your redmine instance should be ready to use.\r\n\r\n### Mail\r\nThe mail configuration should be specified using environment variables while starting the redmine image. The configuration defaults to using gmail to send emails and requires the specification of a valid username and password to login to the gmail servers.\r\n\r\nThe following environment variables need to be specified to get mail support to work.\r\n\r\n* SMTP_HOST (defaults to smtp.gmail.com)\r\n* SMTP_PORT (defaults to 587)\r\n* SMTP_USER\r\n* SMTP_PASS\r\n\r\n```bash\r\ndocker run -name redmine -d \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  -v /opt/redmine/files:/redmine/files sameersbn/redmine\r\n```\r\n\r\nIf you are not using google mail, then please configure the  SMTP host and port using the SMTP_HOST and SMTP_PORT configuration parameters.\r\n\r\n__NOTE:__\r\n\r\nI have only tested standard gmail and google apps login. I expect that the currently provided configuration parameters should be sufficient for most users. If this is not the case, then please let me know.\r\n\r\n### Putting it all together\r\n\r\n```bash\r\ndocker run -name redmine -d -h redmine.local.host \\\r\n  -v /opt/redmine/files:/redmine/files \\\r\n  -v /opt/redmine/mysql:/var/lib/mysql \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  sameersbn/redmine\r\n```\r\n\r\nIf you are using an external mysql database\r\n\r\n```bash\r\ndocker run -name redmine -d -h redmine.local.host \\\r\n  -v /opt/redmine/files:/redmine/files \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=redmine_production\" -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  sameersbn/redmine\r\n```\r\n\r\n### Available Configuration Parameters\r\n\r\nBelow is the complete list of parameters that can be set using environment variables.\r\n\r\n- **DB_HOST**: The mysql server hostname. Defaults to localhost.\r\n- **DB_PORT**: The mysql server port. Defaults to 3306.\r\n- **DB_NAME**: The mysql database name. Defaults to redmine_production\r\n- **DB_USER**: The mysql database user. Defaults to root\r\n- **DB_PASS**: The mysql database password. Defaults to no password\r\n- **DB_POOL**: The mysql database connection pool count. Defaults to 5.\r\n- **MEMCACHED_SIZE**: The local memcached size in Mb. Defaults to 64. Disabled if '0'.\r\n- **SMTP_HOST**: SMTP server host. Defaults to smtp.gmail.com.\r\n- **SMTP_PORT**: SMTP server port. Defaults to 587.\r\n- **SMTP_USER**: SMTP username.\r\n- **SMTP_PASS**: SMTP password.\r\n- **PASSENGER_MAX_POOL_SIZE**: PassengerMaxPoolSize (default: 6)\r\n- **PASSENGER_MIN_INSTANCES**: PassengerMinInstances (default: 1)\r\n- **PASSENGER_MAX_REQUESTS**: PassengerMaxRequests (default: 0)\r\n- **PASSENGER_POOL_IDLE_TIME**: PassengerPoolIdleTime (default: 300)\r\n\r\n## Maintenance\r\n\r\n### SSH Login\r\nThere are two methods to gain root login to the container, the first method is to add your public rsa key to the authorized_keys file and build the image.\r\n\r\nThe second method is use the dynamically generated password. Every time the container is started a random password is generated using the pwgen tool and assigned to the root user. This password can be fetched from the docker logs.\r\n\r\n```bash\r\ndocker logs redmine 2>&1 | grep '^User: ' | tail -n1\r\n```\r\nThis password is not persistent and changes every time the image is executed.\r\n\r\n## Upgrading\r\n\r\nTo upgrade to newer redmine releases, simply follow this 5 step upgrade procedure.\r\n\r\n**Step 1**: Stop the currently running image\r\n\r\n```bash\r\ndocker stop redmine\r\n```\r\n\r\n**Step 2**: Backup the database in case something goes wrong.\r\n\r\n```bash\r\nmysqldump -h <mysql-server-ip> -uredmine -p --add-drop-table redmine_production > redmine.sql\r\n```\r\n\r\n**Step 3**: Update the docker image.\r\n\r\n```bash\r\ndocker pull sameersbn/redmine\r\n```\r\n\r\n**Step 4**: Migrate the database.\r\n\r\n```bash\r\ndocker run -name redmine -i -t -rm [OPTIONS] sameersbn/redmine app:db:migrate\r\n```\r\n\r\n**Step 5**: Start the image\r\n\r\n```bash\r\ndocker run -name redmine -i -d [OPTIONS] sameersbn/redmine\r\n```\r\n\r\n## References\r\n  * http://www.redmine.org/\r\n  * http://www.redmine.org/projects/redmine/wiki/Guide\r\n  * http://www.redmine.org/projects/redmine/wiki/RedmineInstall\r\n","google":"UA-48810494-3","note":"Don't delete this file! It's used internally to help with page regeneration."}